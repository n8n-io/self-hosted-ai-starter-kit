{
  "workflow_id": "KvtoP3HDkM7xzE0y",
  "workflow_name": "Export a workflow's parent folder to local filesystem (v0.2.0)",
  "safe_workflow_name": "Export a workflow's parent folder to local filesystem (v0.2.0)",
  "parent_folder_id": "wbRrsABCPcovov5N",
  "folder_ids": [
    "VQIpeXA2zO4VwcXX",
    "JqaKGfuxDn13pUYO",
    "wbRrsABCPcovov5N"
  ],
  "folder_names": [
    "storage",
    "EXAMPLE_FOLDER_1",
    "export-a-workflow-to-local-fs"
  ],
  "file_path": "folders/VQIpeXA2zO4VwcXX/folders/JqaKGfuxDn13pUYO/folders/wbRrsABCPcovov5N/workflows/KvtoP3HDkM7xzE0y.json",
  "folder_path": "folders/VQIpeXA2zO4VwcXX/folders/JqaKGfuxDn13pUYO/folders/wbRrsABCPcovov5N/",
  "name": "Export a workflow's parent folder to local filesystem (v0.2.0)",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "workflowId",
              "type": "any"
            }
          ]
        }
      },
      "id": "ba5aa2a9-a640-44cf-b1fe-bbbb89079569",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -1712,
        336
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.fullPath }}{{ $binary.data.fileName }}.{{ $binary.data.fileExtension }}",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1664,
        368
      ],
      "id": "5cf92fbc-8890-48d1-805c-94391b79980f",
      "name": "Read/Write Files from Disk",
      "alwaysOutputData": false,
      "executeOnce": true,
      "retryOnFail": false
    },
    {
      "parameters": {
        "operation": "toJson",
        "mode": "each",
        "options": {
          "format": false,
          "fileName": "={{ $json.workflow_id }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        640,
        256
      ],
      "id": "ba10124f-12a7-40bd-8d51-71a24684e64e",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2bd47749-055c-4e52-965f-d56704585985",
              "name": "workflow_id",
              "value": "={{ $if( $json.keys().includes('workflow_id'), $json.workflow_id, $workflow.id ) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1488,
        336
      ],
      "id": "35f6f4f4-31d4-41b9-a986-15b2574b5dff",
      "name": "Set workflow_id"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH RECURSIVE folder_hierarchy AS (\n  -- Base case: Get the workflow and its immediate parent folder\n  SELECT \n    w.id as workflow_id,\n    w.name as workflow_name,\n    w.\"parentFolderId\" as parent_folder_id,\n    f.id as folder_id,\n    f.name as folder_name,\n    f.\"parentFolderId\" as folder_parent_id,\n    ARRAY[f.id]::TEXT[] as folder_ids,\n    ARRAY[f.name]::TEXT[] as folder_names,\n    1 as level\n  FROM workflow_entity w\n  LEFT JOIN folder f ON w.\"parentFolderId\" = f.id\n  WHERE w.id = '{{ $json.workflow_id }}'\n  \n  UNION ALL\n  \n  -- Recursive case: Traverse up the folder hierarchy\n  SELECT \n    fh.workflow_id,\n    fh.workflow_name,\n    fh.parent_folder_id,\n    parent_f.id as folder_id,\n    parent_f.name as folder_name,\n    parent_f.\"parentFolderId\" as folder_parent_id,\n    (ARRAY[parent_f.id] || fh.folder_ids)::TEXT[] as folder_ids,\n    (ARRAY[parent_f.name] || fh.folder_names)::TEXT[] as folder_names,\n    fh.level + 1\n  FROM folder_hierarchy fh\n  JOIN folder parent_f ON fh.folder_parent_id = parent_f.id\n  WHERE parent_f.\"parentFolderId\" IS NOT NULL\n)\nSELECT \n  workflow_id,\n  workflow_name,\n  parent_folder_id,\n  folder_ids,\n  folder_names\nFROM folder_hierarchy\nORDER BY level DESC\nLIMIT 1;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1296,
        336
      ],
      "id": "6a347d1f-ff54-4071-9ebb-126e717c1b8e",
      "name": "Get Folder Hierarchy",
      "credentials": {
        "postgres": {
          "id": "jxFc0HfmahYGoYFL",
          "name": "n8n | Postgres account (jxFc0HfmahYGoYFL)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Function to make strings filesystem-safe (cross-platform)\nfunction makeFilesystemSafe(str) {\n  if (!str) return '';\n  \n  // Replace invalid characters with underscores\n  // Invalid chars: < > : \" | ? * \\ / and control chars\n  return str\n    .replace(/[<>:\"|?*\\\\/\\x00-\\x1f\\x7f]/g, '_')\n    .replace(/^[\\.\\s]+|[\\.\\s]+$/g, '') // Remove leading/trailing dots and spaces\n    .replace(/\\.+$/g, '') // Remove trailing dots\n    .substring(0, 255); // Limit length\n}\n\n// Get data from previous node\nconst data = $input.all()[0].json;\n\n// Build the filesystem path structure\nlet folderPath = '';\nif (data.folder_ids && data.folder_names && data.folder_ids.length > 0) {\n  // The arrays are already in the correct order from root to leaf\n  // No need to reverse them\n  const folderIds = data.folder_ids;\n  \n  // Build path: folders/id1/folders/id2/folders/id3/\n  for (let i = 0; i < folderIds.length; i++) {\n    folderPath += `folders/${folderIds[i]}/`;\n  }\n}\n\n// Create the final file path\nconst finalPath = `${folderPath}workflows/${data.workflow_id}.json`;\n\n// Create filesystem-safe workflow name\nconst safeWorkflowName = makeFilesystemSafe(data.workflow_name);\n\nreturn {\n  workflow_id: data.workflow_id,\n  workflow_name: data.workflow_name,\n  safe_workflow_name: safeWorkflowName,\n  parent_folder_id: data.parent_folder_id,\n  folder_ids: data.folder_ids,\n  folder_names: data.folder_names?.map(name => makeFilesystemSafe(name)),\n  file_path: finalPath,\n  folder_path: folderPath\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1104,
        336
      ],
      "id": "326230f5-6b97-4280-9111-b4d47bad4c2a",
      "name": "Build Filesystem Path"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM workflow_entity WHERE id = '{{ $json.workflow_id }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -784,
        480
      ],
      "id": "ef6557da-3f33-41f4-bc21-6b695f8c24f7",
      "name": "Get Full Workflow Data",
      "credentials": {
        "postgres": {
          "id": "jxFc0HfmahYGoYFL",
          "name": "n8n | Postgres account (jxFc0HfmahYGoYFL)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the merged data from the Merge1 node\nconst inputData = $input.all()[0].json;\n\n// Check if we have the expected data structure\nif (!inputData) {\n  throw new Error('No input data received');\n}\n\n// The merge node should have combined both path data and workflow data\n// Let's extract what we need from the merged data\nconst pathData = {\n  workflow_id: inputData.workflow_id || inputData.id,\n  workflow_name: inputData.workflow_name || inputData.name,\n  safe_workflow_name: inputData.safe_workflow_name,\n  parent_folder_id: inputData.parent_folder_id || inputData.parentFolderId,\n  folder_ids: inputData.folder_ids,\n  folder_names: inputData.folder_names,\n  file_path: inputData.file_path,\n  folder_path: inputData.folder_path\n};\n\n// Create the JSON content to save\nconst jsonContent = {\n  ...inputData,\n  _metadata: {\n    exported_at: new Date().toISOString(),\n    file_path: pathData.file_path,\n    folder_path: pathData.folder_path,\n    safe_workflow_name: pathData.safe_workflow_name,\n    folder_hierarchy: {\n      folder_ids: pathData.folder_ids,\n      folder_names: pathData.folder_names\n    }\n  }\n};\n\nreturn {\n  // json_content: JSON.stringify(jsonContent, null, 2),\n  json_content: jsonContent,\n  file_path: pathData.file_path,\n  folder_path: pathData.folder_path,\n  filename: `${pathData.workflow_id}.json`,\n  workflow_id: pathData.workflow_id\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -512,
        592
      ],
      "id": "e10c8b7c-1f39-41eb-841d-2255d1c3ee00",
      "name": "Prepare JSON Content"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "includeUnpaired": false
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -528,
        352
      ],
      "id": "0997d8c5-78e9-4d35-80ac-3ea74cc04256",
      "name": "Merge1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1664,
        80
      ],
      "id": "b219ba4d-d82c-46a2-8af7-ab917b5165a2",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "command": "=mkdir -p {{ $json.fullPath }} && echo 'Successfully created directory' "
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        864,
        496
      ],
      "id": "edf4fd49-5f95-4d9d-bd7a-1c1b2784ea82",
      "name": "Execute Command",
      "executeOnce": true,
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -96,
        368
      ],
      "id": "04e3ea80-8b09-4a29-9ec6-d89831c536fb",
      "name": "Merge2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2eade28c-f2b0-4896-b094-69e39b1356fa",
              "name": "fullPath",
              "value": "=/data/shared/tmp/{{ $json.folder_path }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        352,
        368
      ],
      "id": "cd0d9146-adc2-46cb-814d-1392ca31bcbf",
      "name": "Edit Fields -> Set fullPath"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1424,
        352
      ],
      "id": "72443a65-0f1d-4363-9870-bca9a3d2449a",
      "name": "Merge"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        944,
        256
      ],
      "id": "1c132b70-32e3-45fe-9486-6c6a2945114c",
      "name": "Wait",
      "webhookId": "4a130526-13d1-4f3c-aa9f-bf1d1afa908e"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1056,
        368
      ],
      "id": "9611eef3-aafe-4568-8720-c78f52187a16",
      "name": "Wait1",
      "webhookId": "d79d6beb-374b-409f-acdc-61b341dace83"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1152,
        480
      ],
      "id": "85d2d6c5-d59d-4ae6-b7cb-c61a79a83857",
      "name": "Wait2",
      "webhookId": "59a0f386-9f0d-4a77-b032-05523586c495"
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Set workflow_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set workflow_id": {
      "main": [
        [
          {
            "node": "Get Folder Hierarchy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Folder Hierarchy": {
      "main": [
        [
          {
            "node": "Build Filesystem Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Filesystem Path": {
      "main": [
        [
          {
            "node": "Get Full Workflow Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Full Workflow Data": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Prepare JSON Content": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare JSON Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set workflow_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [],
        []
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Edit Fields -> Set fullPath",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields -> Set fullPath": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-30T03:39:37.224Z",
  "updatedAt": "2025-07-30T06:37:19.687Z",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "pinData": {
    "Start": [
      {
        "json": {
          "workflowId": "KvtoP3HDkM7xzE0y"
        }
      }
    ]
  },
  "versionId": "53c2d525-0a68-4ddd-8ddd-7632d5d510df",
  "triggerCount": 0,
  "id": "KvtoP3HDkM7xzE0y",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "parentFolderId": "wbRrsABCPcovov5N",
  "isArchived": false
}